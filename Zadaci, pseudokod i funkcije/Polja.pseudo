PoljeJun2017(A, N)
	v <- (A[1] + A[N]) / 2
    i <- 1
    while (i <= N)
        if (A[i] = v)
            return A[i]
        end
        i <- i + 1
    end
    return -1
end

// Napisati pseudokod operacije koja pronalazi vrednost najmanjeg elementa u polju A od N elemenata,
// a nakon toga od vrednosti svih elemenata polja se vrši oduzimanje pronađene vrednosti najmanjeg elementa.

ArrayMinThenSubtract(A, N)
    min = A[0]
    i <- 0
    while (i < N)
        if (A[i] < min)
            min <- A[i]
            i += 1
    end
    i <- 0
    while (i < N)
        A[i] -= min
        i += 1
    end

// O(n)

// Dato je polje A od N elemenata i polje B od M elemenata (M<N).
// Napisati pseudokod operacije koja pronalazi redom pozicije elemenata iz polja B u polju A
// i na mesto tog elementa u polju B upisuje indeks pozicije iz A ili 0 ako ne postoji.

Pozicije(A, N, B, M)
    j <- 0
    while (j < M)
        i <- 0
        while (i < N and A[i] != B[j])
            i += 1
        end
        if (A[i] = B[j])
                B[j] <- i
        else
            B[j] <- 0
        j += 1
    end

// O(m*n) = O(n^2)

// Napisati pseudokod operacije za traženje elementa E u polju A od N elemenata.
// Uočite razliku ako je polje uređeno i ako nije uređeno!

// Ako nije uredjeno:
ArraySearch(A, N, E)
    i <- 0
    ind <- NULL
    while (i < N)
        if (A[i] = E) then
            ind = i
        i += 1
    end
    return ind
// O(n)

// Ako je uredjeno:
BinarySearch(A, N, E)
    l <- 0
    d <- N-1
    s <- (l + d) / 2
    ind <- NULL
    while (l < d)
        if (A[s] < E) then
            l <- s+1
        else
            d <- s-1
    end
    if (A[s] = E) then
        ind = l
    return ind
// O(logn)

// Napisati pseudokod operacije za obilazak polja A od N elemenata.

ArrayTraversal(A, N)
	i <- 0
	while (i <= N)
		process(A[i])
		i += 1
	end
// O(n)

// Dato je polje A od N elementa (celih brojeva), u kome su u prvoj polovini polja (od 1 do N/2)
// elementi uređeni u rastući poredak, a u drugoj polovini (od (N/2)+1 do N) nisu uređeni, ali su
// vrednosti veće od vrednosti elemenata u prvoj polovini polja.
// Napisati pseudokod operacije za traženje elementa E u polju A.

Search(A, N, E)
    ind <- N/2
    if (A[ind] = E) then
        return ind
    if (A[ind] < E) then
        ind <- BinarySearch(A, N/2, E) // O(logn)
        return ind
    else
        ind <- ArraySearch(A + N/2 + 1, N - (N/2 + 1), E) // O(n)
        return ind
// O(n) + O(logn) = O(n)